{"version":3,"sources":["components/navbar.js","components/users.js","components/table.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Users","props","scope","key","id","firstName","charAt","toUpperCase","slice","lastName","email","phone","Table","state","userList","users","sortOrder","filter","handleNumSort","whatToSort","newSort","sort","a","b","console","log","newSortOrder","setState","handleStringSort","stringA","stringB","handleInputChange","event","value","target","toLowerCase","newFilter","name","filterUsers","includes","onClick","this","map","user","onSubmit","preventDefault","onChange","type","placeholder","React","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.18eca86e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-success justify-content-center\">\r\n            <span className=\"navbar-brand mb-0 h1 text-white\">User Directory</span>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nfunction Users(props) {\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                <th scope=\"row\" key={props.id}>{props.id}</th>\r\n                <td>{props.firstName.charAt(0).toUpperCase()}{props.firstName.slice(1)}</td>\r\n                <td>{props.lastName}</td>\r\n                <td>{props.email}</td>\r\n                <td>{props.phone}</td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport Users from \"./users.js\";\r\nimport users from \"../users.json\";\r\n\r\nclass Table extends React.Component {\r\n    state = {\r\n        userList: users,\r\n        sortOrder: \"\",\r\n        filter: \"\"\r\n    };\r\n\r\n    handleNumSort = (whatToSort) => {\r\n        let newSort;\r\n        newSort = this.state.userList.sort((a, b) => {\r\n            if (this.state.sortOrder === \"des\") {\r\n                return a[whatToSort] - b[whatToSort];\r\n            } else {\r\n                return b[whatToSort] - a[whatToSort];\r\n            }\r\n        });\r\n        console.log(newSort);\r\n        const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\";\r\n        this.setState({ userList: newSort, sortOrder: newSortOrder })\r\n    };\r\n\r\n    handleStringSort = (whatToSort) => {\r\n        const newSort = this.state.userList.sort((a, b) => {\r\n            var stringA = a[whatToSort].toUpperCase();\r\n            var stringB = b[whatToSort].toUpperCase();\r\n            if (this.state.sortOrder === \"des\") {\r\n\r\n                if (stringA < stringB) {\r\n                    return -1;\r\n                }\r\n                if (stringA > stringB) {\r\n                    return 1;\r\n                }\r\n\r\n                // strings must be equal\r\n                return 0;\r\n            } else {\r\n                if (stringA < stringB) {\r\n                    return 1;\r\n                }\r\n                if (stringA > stringB) {\r\n                    return -1;\r\n                }\r\n\r\n                // strings must be equal\r\n                return 0;\r\n            }\r\n        });\r\n        console.log(newSort);\r\n        const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\";\r\n        this.setState({ userList: newSort, sortOrder: newSortOrder })\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        // Getting the value and name of the input which triggered the change\r\n        let value = event.target.value.toLowerCase() || \"\";\r\n        console.log(value);\r\n        const name = event.target.name;\r\n        let newFilter;\r\n        newFilter = users.filter((filterUsers) => {\r\n            filterUsers[name] = filterUsers[name].toLowerCase();\r\n            console.log(filterUsers);\r\n            return filterUsers[name].includes(value)\r\n        })\r\n        // Updating the input's state\r\n        this.setState({\r\n            filter: value,\r\n            userList: newFilter\r\n        });\r\n\r\n        if (value === \"\") {\r\n            this.setState({\r\n                userList: users\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-10\">\r\n                        <table className=\"table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    {/* Use these onClicks for sorting later */}\r\n                                    <th scope=\"col\" onClick={() => this.handleNumSort(\"id\")}>#</th>\r\n                                    <th scope=\"col\" onClick={() => this.handleStringSort(\"firstName\")}>First</th>\r\n                                    <th scope=\"col\" onClick={() => this.handleStringSort(\"lastName\")}>Last</th>\r\n                                    <th scope=\"col\" onClick={() => this.handleStringSort(\"email\")}>Email</th>\r\n                                    <th scope=\"col\" onClick={() => this.handleStringSort(\"phone\")}>Phone</th>\r\n                                </tr>\r\n                            </thead>\r\n                            {this.state.userList.map(user => (\r\n                                <Users\r\n                                    key={user.id}\r\n                                    id={user.id}\r\n                                    firstName={user.firstName}\r\n                                    lastName={user.lastName}\r\n                                    email={user.email}\r\n                                    phone={user.phone} />\r\n                            ))}\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-10\">\r\n                        <form className=\"form\" onSubmit={event => { event.preventDefault() }}>\r\n                            <input\r\n                                value={this.state.filter}\r\n                                name=\"firstName\"\r\n                                onChange={this.handleInputChange}\r\n                                type=\"text\"\r\n                                placeholder=\"Filter by first name...\"\r\n                            />\r\n                            {/* <input\r\n                                value={this.state.filter}\r\n                                name=\"lastName\"\r\n                                onChange={this.handleInputChange}\r\n                                type=\"text\"\r\n                                placeholder=\"Filter by last name...\"\r\n                            /> */}\r\n                            {/* <button onClick={this.handleFormSubmit}>Submit</button> */}\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer mt-auto py-3\">\r\n        <div className=\"container text-center\">\r\n          <span className=\"text-muted\">&#169; Jordan Triplett | 2020 </span>\r\n        </div>\r\n      </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport Navbar from './components/navbar';\nimport Table from './components/table';\nimport Footer from './components/footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Navbar />\n        <Table />\n        <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}